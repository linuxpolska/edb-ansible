---
# Configure pgpoolII SR checking and streaming replication

# Build random password for pgpool2_sr_user if needed
- name: Build random password for pgpool2_sr_user
  ansible.builtin.set_fact:
    pgpool2_sr_check_password: >-
      {{ lookup('password', '/dev/null chars=ascii_letters,digits length=12') }}
  run_once: true
  when:
    - pgpool2_sr_check_password|length == 0

# Create pgpool2_sr_user Postgres user on the primary node
- name: Create pgpoolII SR check role on Postgres primary node
  ansible.builtin.include_role:
    name: manage_dbserver
    tasks_from: manage_users
    apply:
      delegate_to: "{{ pgpool2_primary_inventory_hostname }}"
  vars:
    pg_users:
      - name: "{{ pgpool2_sr_check_user }}"
        pass: "{{ pgpool2_sr_check_password }}"
        role_attr_flags: login
  run_once: true
  when:
    - pgpool2_primary_inventory_hostname is defined
    - pgpool2_primary_inventory_hostname|length > 0

# grant monitoring privilege to pgpool2 user for replication status
- name: Grant execute privileges on system functions to pgpoolII sr user
  ansible.builtin.include_role:
    name: manage_dbserver
    tasks_from: manage_privileges
    apply:
      delegate_to: "{{ pgpool2_primary_inventory_hostname }}"
  vars:
    pg_grant_roles:
      - user: "{{ pgpool2_sr_check_user }}"
        role: "pg_monitor"
  run_once: true
  when:
    - pgpool2_primary_inventory_hostname is defined
    - pgpool2_primary_inventory_hostname|length > 0

- name: Build pgpoolII SR configuration
  ansible.builtin.set_fact:
    pgpool2_sr_configuration: >-
      [
        {
          'key': 'backend_clustering_mode',
          'value': 'streaming_replication',
          'state': 'present',
          'quoted': true
        },
        {
          'key': 'sr_check_period',
          'value': 1,
          'state': 'present',
          'quoted': false
        },
        {
          'key': 'sr_check_user',
          'value': '{{ pgpool2_sr_check_user }}',
          'state': 'present',
          'quoted': true
        },
        {
          'key': 'sr_check_password',
          'value': '{{ pgpool2_sr_check_password }}',
          'state': 'present',
          'quoted': true
        },
        {
          'key': 'failover_on_backend_error',
          'value': 'off',
          'state': 'present',
          'quoted': false
        },
        {
          'key': 'search_primary_node_timeout',
          'value': 5,
          'state': 'present',
          'quoted': false
        },
        {
          'key': 'wd_priority',
          'value': '{{ wd_priority }}',
          'state': 'present',
          'quoted': false
        },
        {
          'key': 'log_directory',
          'value': '/var/log/edb/pgpool{{ pgpool2_version }}/',
          'state': 'present',
          'quoted': true
        }
      ]

# TODO: create a loop for it
- name: Build pgpoolII SR hosts configuration
  ansible.builtin.set_fact:
    pgpool2_sr_configuration_hosts: >-
      [
        {
          'key': 'hostname0',
          'value': '{{ groups['pgpool2'][0] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 0 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'pgpool_port0',
          'value': '{{ pgpool2_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 0 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'wd_port0',
          'value': '{{ pgpool2_wd_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 0 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'heartbeat_hostname0',
          'value': '{{ groups['pgpool2'][0] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 0 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'heartbeat_port0',
          'value': '{{ pgpool2_wd_heartbeat_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 0 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'hostname1',
          'value': '{{ groups['pgpool2'][1] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 1 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'pgpool_port1',
          'value': '{{ pgpool2_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 1 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'wd_port1',
          'value': '{{ pgpool2_wd_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 1 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'heartbeat_hostname1',
          'value': '{{ groups['pgpool2'][1] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 0 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'heartbeat_port1',
          'value': '{{ pgpool2_wd_heartbeat_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 1 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'hostname2',
          'value': '{{ groups['pgpool2'][2] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 2 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'pgpool_port2',
          'value': '{{ pgpool2_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 2 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'wd_port2',
          'value': '{{ pgpool2_wd_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 2 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'heartbeat_hostname2',
          'value': '{{ groups['pgpool2'][2] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 2 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'heartbeat_port2',
          'value': '{{ pgpool2_wd_heartbeat_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 2 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'hostname3',
          'value': '{{ groups['pgpool2'][3] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 3 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'pgpool_port3',
          'value': '{{ pgpool2_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 3 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'wd_port3',
          'value': '{{ pgpool2_wd_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 3 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'heartbeat_hostname3',
          'value': '{{ groups['pgpool2'][3] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 3 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'heartbeat_port3',
          'value': '{{ pgpool2_wd_heartbeat_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 3 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'hostname4',
          'value': '{{ groups['pgpool2'][4] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 4 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'pgpool_port4',
          'value': '{{ pgpool2_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 4 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'wd_port4',
          'value': '{{ pgpool2_wd_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 4 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'heartbeat_hostname4',
          'value': '{{ groups['pgpool2'][4] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 4 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'heartbeat_port4',
          'value': '{{ pgpool2_wd_heartbeat_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 4 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'hostname5',
          'value': '{{ groups['pgpool2'][5] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 5 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'pgpool_port5',
          'value': '{{ pgpool2_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 5 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'wd_port5',
          'value': '{{ pgpool2_wd_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 5 else 'absent' }}',
          'quoted': false
        },
        {
          'key': 'heartbeat_hostname5',
          'value': '{{ groups['pgpool2'][5] | default('') }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 5 else 'absent' }}',
          'quoted': true
        },
        {
          'key': 'heartbeat_port5',
          'value': '{{ pgpool2_wd_heartbeat_port }}',
          'state': '{{ 'present' if groups['pgpool2'] | length > 5 else 'absent' }}',
          'quoted': false
        }
      ]

# Apply configuration changes
- name: Include pgpool2_manage_configuration
  ansible.builtin.include_role:
    name: manage_pgpool2
    tasks_from: pgpool2_manage_configuration
  vars:
    pgpool2_configuration_lines: "{{ pgpool2_sr_configuration }}"

- name: Include pgpool2_manage_configuration
  ansible.builtin.include_role:
    name: manage_pgpool2
    tasks_from: pgpool2_manage_configuration
  vars:
    pgpool2_configuration_lines: "{{ pgpool2_sr_configuration_hosts }}"
